@model CloudBreadAdminWeb.AdminMembers

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>AdminMembers</h4>
        <p>주의 - Entity 생성 작업은 관리자 화면에서 직접 작업에 적합하지 않음.</p>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.AdminMemberID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AdminMemberID, new { htmlAttributes = new { @class = "form-control" } })
                (고유값) @Html.ValidationMessageFor(model => model.AdminMemberID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AdminMemberPWD, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AdminMemberPWD, new { htmlAttributes = new { @class = "form-control" } })
                (비밀번호는 자동 SHA-512로 암호화 되어 저장됨) @Html.ValidationMessageFor(model => model.AdminMemberPWD, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AdminMemberEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AdminMemberEmail, new { htmlAttributes = new { @class = "form-control" } })
                (고유값) @Html.ValidationMessageFor(model => model.AdminMemberEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => model.IDCreateAdminMember)

        @*<div class="form-group">
            @Html.LabelFor(model => model.IDCreateAdminMember, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IDCreateAdminMember, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IDCreateAdminMember, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.AdminGroup, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AdminGroup, new { htmlAttributes = new { @class = "form-control" } })
                (Admin / Operator / Reader 중 하나) @Html.ValidationMessageFor(model => model.AdminGroup, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PINumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PINumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PINumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name3, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name3, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name3, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => model.LastIPaddress)
        @Html.HiddenFor(model => model.LastLoginDT)
        @Html.HiddenFor(model => model.LastLogoutDT)

        @*<div class="form-group">
            @Html.LabelFor(model => model.LastIPaddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastIPaddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastIPaddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastLoginDT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastLoginDT, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastLoginDT, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastLogoutDT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastLogoutDT, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastLogoutDT, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.sCol1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sCol1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sCol1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sCol2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sCol2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sCol2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sCol3, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sCol3, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sCol3, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sCol4, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sCol4, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sCol4, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sCol5, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sCol5, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sCol5, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sCol6, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sCol6, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sCol6, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sCol7, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sCol7, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sCol7, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sCol8, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sCol8, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sCol8, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sCol9, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sCol9, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sCol9, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sCol10, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sCol10, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sCol10, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TimeZoneID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.TimeZoneID, new { htmlAttributes = new { @class = "form-control" } })*@
                @* KOREA로 박아 놓자. *@
                <select id="TimeZoneID" name="timezoneid" class="form-control">
                    <option value="Morocco Standard Time">(GMT) Casablanca</option>
                    <option value="GMT Standard Time">(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London</option>
                    <option value="Greenwich Standard Time">(GMT) Monrovia, Reykjavik</option>
                    <option value="W. Europe Standard Time">(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna</option>
                    <option value="Central Europe Standard Time">(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague</option>
                    <option value="Romance Standard Time">(GMT+01:00) Brussels, Copenhagen, Madrid, Paris</option>
                    <option value="Central European Standard Time">(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb</option>
                    <option value="W. Central Africa Standard Time">(GMT+01:00) West Central Africa</option>
                    <option value="Jordan Standard Time">(GMT+02:00) Amman</option>
                    <option value="GTB Standard Time">(GMT+02:00) Athens, Bucharest, Istanbul</option>
                    <option value="Middle East Standard Time">(GMT+02:00) Beirut</option>
                    <option value="Egypt Standard Time">(GMT+02:00) Cairo</option>
                    <option value="South Africa Standard Time">(GMT+02:00) Harare, Pretoria</option>
                    <option value="FLE Standard Time">(GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius</option>
                    <option value="Israel Standard Time">(GMT+02:00) Jerusalem</option>
                    <option value="E. Europe Standard Time">(GMT+02:00) Minsk</option>
                    <option value="Namibia Standard Time">(GMT+02:00) Windhoek</option>
                    <option value="Arabic Standard Time">(GMT+03:00) Baghdad</option>
                    <option value="Arab Standard Time">(GMT+03:00) Kuwait, Riyadh</option>
                    <option value="Russian Standard Time">(GMT+03:00) Moscow, St. Petersburg, Volgograd</option>
                    <option value="E. Africa Standard Time">(GMT+03:00) Nairobi</option>
                    <option value="Georgian Standard Time">(GMT+03:00) Tbilisi</option>
                    <option value="Iran Standard Time">(GMT+03:30) Tehran</option>
                    <option value="Arabian Standard Time">(GMT+04:00) Abu Dhabi, Muscat</option>
                    <option value="Azerbaijan Standard Time">(GMT+04:00) Baku</option>
                    <option value="Mauritius Standard Time">(GMT+04:00) Port Louis</option>
                    <option value="Caucasus Standard Time">(GMT+04:00) Yerevan</option>
                    <option value="Afghanistan Standard Time">(GMT+04:30) Kabul</option>
                    <option value="Ekaterinburg Standard Time">(GMT+05:00) Ekaterinburg</option>
                    <option value="Pakistan Standard Time">(GMT+05:00) Islamabad, Karachi</option>
                    <option value="West Asia Standard Time">(GMT+05:00) Tashkent</option>
                    <option value="India Standard Time">(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi</option>
                    <option value="Sri Lanka Standard Time">(GMT+05:30) Sri Jayawardenepura</option>
                    <option value="Nepal Standard Time">(GMT+05:45) Kathmandu</option>
                    <option value="N. Central Asia Standard Time">(GMT+06:00) Almaty, Novosibirsk</option>
                    <option value="Central Asia Standard Time">(GMT+06:00) Astana, Dhaka</option>
                    <option value="Myanmar Standard Time">(GMT+06:30) Yangon (Rangoon)</option>
                    <option value="SE Asia Standard Time">(GMT+07:00) Bangkok, Hanoi, Jakarta</option>
                    <option value="North Asia Standard Time">(GMT+07:00) Krasnoyarsk</option>
                    <option value="China Standard Time">(GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi</option>
                    <option value="North Asia East Standard Time">(GMT+08:00) Irkutsk, Ulaan Bataar</option>
                    <option value="Singapore Standard Time">(GMT+08:00) Kuala Lumpur, Singapore</option>
                    <option value="W. Australia Standard Time">(GMT+08:00) Perth</option>
                    <option value="Taipei Standard Time">(GMT+08:00) Taipei</option>
                    <option value="Tokyo Standard Time">(GMT+09:00) Osaka, Sapporo, Tokyo</option>
                    <option selected="selected" value="Korea Standard Time">(GMT+09:00) Seoul</option>
                    <option value="Yakutsk Standard Time">(GMT+09:00) Yakutsk</option>
                    <option value="Cen. Australia Standard Time">(GMT+09:30) Adelaide</option>
                    <option value="AUS Central Standard Time">(GMT+09:30) Darwin</option>
                    <option value="E. Australia Standard Time">(GMT+10:00) Brisbane</option>
                    <option value="AUS Eastern Standard Time">(GMT+10:00) Canberra, Melbourne, Sydney</option>
                    <option value="West Pacific Standard Time">(GMT+10:00) Guam, Port Moresby</option>
                    <option value="Tasmania Standard Time">(GMT+10:00) Hobart</option>
                    <option value="Vladivostok Standard Time">(GMT+10:00) Vladivostok</option>
                    <option value="Central Pacific Standard Time">(GMT+11:00) Magadan, Solomon Is., New Caledonia</option>
                    <option value="New Zealand Standard Time">(GMT+12:00) Auckland, Wellington</option>
                    <option value="Fiji Standard Time">(GMT+12:00) Fiji, Kamchatka, Marshall Is.</option>
                    <option value="Tonga Standard Time">(GMT+13:00) Nuku'alofa</option>
                    <option value="Azores Standard Time">(GMT-01:00) Azores</option>
                    <option value="Cape Verde Standard Time">(GMT-01:00) Cape Verde Is.</option>
                    <option value="Mid-Atlantic Standard Time">(GMT-02:00) Mid-Atlantic</option>
                    <option value="E. South America Standard Time">(GMT-03:00) Brasilia</option>
                    <option value="Argentina Standard Time">(GMT-03:00) Buenos Aires</option>
                    <option value="SA Eastern Standard Time">(GMT-03:00) Georgetown</option>
                    <option value="Greenland Standard Time">(GMT-03:00) Greenland</option>
                    <option value="Montevideo Standard Time">(GMT-03:00) Montevideo</option>
                    <option value="Newfoundland Standard Time">(GMT-03:30) Newfoundland</option>
                    <option value="Atlantic Standard Time">(GMT-04:00) Atlantic Time (Canada)</option>
                    <option value="SA Western Standard Time">(GMT-04:00) La Paz</option>
                    <option value="Central Brazilian Standard Time">(GMT-04:00) Manaus</option>
                    <option value="Pacific SA Standard Time">(GMT-04:00) Santiago</option>
                    <option value="Venezuela Standard Time">(GMT-04:30) Caracas</option>
                    <option value="SA Pacific Standard Time">(GMT-05:00) Bogota, Lima, Quito, Rio Branco</option>
                    <option value="Eastern Standard Time">(GMT-05:00) Eastern Time (US & Canada)</option>
                    <option value="US Eastern Standard Time">(GMT-05:00) Indiana (East)</option>
                    <option value="Central America Standard Time">(GMT-06:00) Central America</option>
                    <option value="Central Standard Time">(GMT-06:00) Central Time (US & Canada)</option>
                    <option value="Central Standard Time (Mexico)">(GMT-06:00) Guadalajara, Mexico City, Monterrey</option>
                    <option value="Canada Central Standard Time">(GMT-06:00) Saskatchewan</option>
                    <option value="US Mountain Standard Time">(GMT-07:00) Arizona</option>
                    <option value="Mountain Standard Time (Mexico)">(GMT-07:00) Chihuahua, La Paz, Mazatlan</option>
                    <option value="Mountain Standard Time">(GMT-07:00) Mountain Time (US & Canada)</option>
                    <option value="Pacific Standard Time">(GMT-08:00) Pacific Time (US & Canada)</option>
                    <option value="Pacific Standard Time (Mexico)">(GMT-08:00) Tijuana, Baja California</option>
                    <option value="Alaskan Standard Time">(GMT-09:00) Alaska</option>
                    <option value="Hawaiian Standard Time">(GMT-10:00) Hawaii</option>
                    <option value="Samoa Standard Time">(GMT-11:00) Midway Island, Samoa</option>
                    <option value="Dateline Standard Time">(GMT-12:00) International Date Line West</option>
                </select>

                @Html.ValidationMessageFor(model => model.TimeZoneID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HideYN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HideYN, new { htmlAttributes = new { @class = "form-control", @Value = "N" } })
                (Y 또는 N 입력)  @Html.ValidationMessageFor(model => model.HideYN, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DeleteYN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DeleteYN, new { htmlAttributes = new { @class = "form-control", @Value = "N" } })
                (Y 또는 N 입력) @Html.ValidationMessageFor(model => model.DeleteYN, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => model.CreatedAt, new { Value = "1900-01-01" })
        @Html.HiddenFor(model => model.UpdatedAt, new { Value = "1900-01-01" })
        @Html.HiddenFor(model => model.DataFromRegion, new { Value = "" })
        @Html.HiddenFor(model => model.DataFromRegionDT, new { Value = "1900-01-01" })

        @*<div class="form-group">
            @Html.LabelFor(model => model.CreatedAt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatedAt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreatedAt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UpdatedAt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UpdatedAt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UpdatedAt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataFromRegion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DataFromRegion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataFromRegion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataFromRegionDT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DataFromRegionDT, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataFromRegionDT, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
